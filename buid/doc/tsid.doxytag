<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>solver-HQP-eiquadprog-rt.hxx</name>
    <path>/home/user/tsid/include/tsid/solvers/</path>
    <filename>solver-HQP-eiquadprog-rt_8hxx</filename>
    <namespace>tsid</namespace>
    <namespace>tsid::solvers</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PROFILE_EIQUADPROG_PREPARATION</name>
      <anchorfile>solver-HQP-eiquadprog-rt_8hxx.html</anchorfile>
      <anchor>abe429f1303a9259fb3ab1e51f8156285</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PROFILE_EIQUADPROG_SOLUTION</name>
      <anchorfile>solver-HQP-eiquadprog-rt_8hxx.html</anchorfile>
      <anchor>abdafebc3b59325f230a470f9fc263638</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>solver-HQP-factory.hxx</name>
    <path>/home/user/tsid/include/tsid/solvers/</path>
    <filename>solver-HQP-factory_8hxx</filename>
    <includes id="solver-HQP-eiquadprog-rt_8hxx" name="solver-HQP-eiquadprog-rt.hxx" local="no" imported="no">tsid/solvers/solver-HQP-eiquadprog-rt.hxx</includes>
    <namespace>tsid</namespace>
    <namespace>tsid::solvers</namespace>
  </compound>
  <compound kind="file">
    <name>Stdafx.hh</name>
    <path>/home/user/tsid/include/tsid/utils/</path>
    <filename>Stdafx_8hh</filename>
  </compound>
  <compound kind="file">
    <name>contact-6d.cpp</name>
    <path>/home/user/tsid/src/contacts/</path>
    <filename>contact-6d_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>contact-base.cpp</name>
    <path>/home/user/tsid/src/contacts/</path>
    <filename>contact-base_8cpp</filename>
    <namespace>tsid</namespace>
    <namespace>tsid::contacts</namespace>
  </compound>
  <compound kind="file">
    <name>contact-point.cpp</name>
    <path>/home/user/tsid/src/contacts/</path>
    <filename>contact-point_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>inverse-dynamics-formulation-acc-force.cpp</name>
    <path>/home/user/tsid/src/formulations/</path>
    <filename>inverse-dynamics-formulation-acc-force_8cpp</filename>
    <member kind="typedef">
      <type>pinocchio::Data</type>
      <name>Data</name>
      <anchorfile>inverse-dynamics-formulation-acc-force_8cpp.html</anchorfile>
      <anchor>ab58c80900019519c2596b813a1cbf4ab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>inverse-dynamics-formulation-base.cpp</name>
    <path>/home/user/tsid/src/formulations/</path>
    <filename>inverse-dynamics-formulation-base_8cpp</filename>
    <namespace>tsid</namespace>
  </compound>
  <compound kind="file">
    <name>constraint-base.cpp</name>
    <path>/home/user/tsid/src/math/</path>
    <filename>constraint-base_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>constraint-bound.cpp</name>
    <path>/home/user/tsid/src/math/</path>
    <filename>constraint-bound_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>constraint-equality.cpp</name>
    <path>/home/user/tsid/src/math/</path>
    <filename>constraint-equality_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>constraint-inequality.cpp</name>
    <path>/home/user/tsid/src/math/</path>
    <filename>constraint-inequality_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>utils.cpp</name>
    <path>/home/user/tsid/src/math/</path>
    <filename>math_2utils_8cpp</filename>
    <namespace>tsid</namespace>
    <namespace>tsid::math</namespace>
    <member kind="function">
      <type>void</type>
      <name>SE3ToXYZQUAT</name>
      <anchorfile>namespacetsid_1_1math.html</anchorfile>
      <anchor>a7632d7415bf148e9d7a3bbd372193297</anchor>
      <arglist>(const pinocchio::SE3 &amp;M, RefVector xyzQuat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SE3ToVector</name>
      <anchorfile>namespacetsid_1_1math.html</anchorfile>
      <anchor>af24527ddde0e25580f82f3a49ab70685</anchor>
      <arglist>(const pinocchio::SE3 &amp;M, RefVector vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vectorToSE3</name>
      <anchorfile>namespacetsid_1_1math.html</anchorfile>
      <anchor>a42cd55fae57d85c780651a9f26d12931</anchor>
      <arglist>(RefVector vec, pinocchio::SE3 &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>errorInSE3</name>
      <anchorfile>namespacetsid_1_1math.html</anchorfile>
      <anchor>ac4b4a961a8a25a6b3421ec5cc707da10</anchor>
      <arglist>(const pinocchio::SE3 &amp;M, const pinocchio::SE3 &amp;Mdes, pinocchio::Motion &amp;error)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solveWithDampingFromSvd</name>
      <anchorfile>namespacetsid_1_1math.html</anchorfile>
      <anchor>a787bdcd3aa327a945b173a4ee0282f8b</anchor>
      <arglist>(Eigen::JacobiSVD&lt; Eigen::MatrixXd &gt; &amp;svd, ConstRefVector b, RefVector sol, double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>svdSolveWithDamping</name>
      <anchorfile>namespacetsid_1_1math.html</anchorfile>
      <anchor>a2baa7c43015c02a31003cf88d3f47854</anchor>
      <arglist>(ConstRefMatrix A, ConstRefVector b, RefVector sol, double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pseudoInverse</name>
      <anchorfile>namespacetsid_1_1math.html</anchorfile>
      <anchor>a4d0cb6b924b5162c0b59aa4a3c466a16</anchor>
      <arglist>(ConstRefMatrix A, RefMatrix Apinv, double tolerance, unsigned int computationOptions)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pseudoInverse</name>
      <anchorfile>namespacetsid_1_1math.html</anchorfile>
      <anchor>afc73d553a5b194584f295411acca7d11</anchor>
      <arglist>(ConstRefMatrix A, Eigen::JacobiSVD&lt; Eigen::MatrixXd &gt; &amp;svdDecomposition, RefMatrix Apinv, double tolerance, unsigned int computationOptions)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pseudoInverse</name>
      <anchorfile>namespacetsid_1_1math.html</anchorfile>
      <anchor>a0f3bce8978d8524882426297017e0db3</anchor>
      <arglist>(ConstRefMatrix A, Eigen::JacobiSVD&lt; Eigen::MatrixXd &gt; &amp;svdDecomposition, RefMatrix Apinv, double tolerance, double *nullSpaceBasisOfA, int &amp;nullSpaceRows, int &amp;nullSpaceCols, unsigned int computationOptions)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dampedPseudoInverse</name>
      <anchorfile>namespacetsid_1_1math.html</anchorfile>
      <anchor>a69c13fa4361dd89904b36a18d02073df</anchor>
      <arglist>(ConstRefMatrix A, Eigen::JacobiSVD&lt; Eigen::MatrixXd &gt; &amp;svdDecomposition, RefMatrix Apinv, double tolerance, double dampingFactor, unsigned int computationOptions, double *nullSpaceBasisOfA, int *nullSpaceRows, int *nullSpaceCols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nullSpaceBasisFromDecomposition</name>
      <anchorfile>namespacetsid_1_1math.html</anchorfile>
      <anchor>a14818fc8b11173a09c81906c5449a3fe</anchor>
      <arglist>(const Eigen::JacobiSVD&lt; Eigen::MatrixXd &gt; &amp;svdDecomposition, double tolerance, double *nullSpaceBasisMatrix, int &amp;rows, int &amp;cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nullSpaceBasisFromDecomposition</name>
      <anchorfile>namespacetsid_1_1math.html</anchorfile>
      <anchor>a55769faf54bf74fa25ead7b47de70aac</anchor>
      <arglist>(const Eigen::JacobiSVD&lt; Eigen::MatrixXd &gt; &amp;svdDecomposition, int rank, double *nullSpaceBasisMatrix, int &amp;rows, int &amp;cols)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>utils.cpp</name>
    <path>/home/user/tsid/src/solvers/</path>
    <filename>solvers_2utils_8cpp</filename>
    <namespace>tsid</namespace>
    <namespace>tsid::solvers</namespace>
    <member kind="function">
      <type>std::string</type>
      <name>HQPDataToString</name>
      <anchorfile>namespacetsid_1_1solvers.html</anchorfile>
      <anchor>a2a6b52481bd53ae409d1e711d397782b</anchor>
      <arglist>(const HQPData &amp;data, bool printMatrices)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>robot-wrapper.cpp</name>
    <path>/home/user/tsid/src/robots/</path>
    <filename>robot-wrapper_8cpp</filename>
    <namespace>tsid</namespace>
    <namespace>tsid::robots</namespace>
  </compound>
  <compound kind="file">
    <name>solver-HQP-base.cpp</name>
    <path>/home/user/tsid/src/solvers/</path>
    <filename>solver-HQP-base_8cpp</filename>
    <namespace>tsid</namespace>
    <namespace>tsid::solvers</namespace>
  </compound>
  <compound kind="file">
    <name>solver-HQP-eiquadprog-fast.cpp</name>
    <path>/home/user/tsid/src/solvers/</path>
    <filename>solver-HQP-eiquadprog-fast_8cpp</filename>
    <namespace>tsid</namespace>
    <namespace>tsid::solvers</namespace>
  </compound>
  <compound kind="file">
    <name>solver-HQP-eiquadprog.cpp</name>
    <path>/home/user/tsid/src/solvers/</path>
    <filename>solver-HQP-eiquadprog_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>solver-HQP-factory.cpp</name>
    <path>/home/user/tsid/src/solvers/</path>
    <filename>solver-HQP-factory_8cpp</filename>
    <namespace>tsid</namespace>
    <namespace>tsid::solvers</namespace>
  </compound>
  <compound kind="file">
    <name>solver-HQP-qpoases.cpp</name>
    <path>/home/user/tsid/src/solvers/</path>
    <filename>solver-HQP-qpoases_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>task-actuation-bounds.cpp</name>
    <path>/home/user/tsid/src/tasks/</path>
    <filename>task-actuation-bounds_8cpp</filename>
    <namespace>tsid</namespace>
    <namespace>tsid::tasks</namespace>
  </compound>
  <compound kind="file">
    <name>task-actuation-equality.cpp</name>
    <path>/home/user/tsid/src/tasks/</path>
    <filename>task-actuation-equality_8cpp</filename>
    <namespace>tsid</namespace>
    <namespace>tsid::tasks</namespace>
  </compound>
  <compound kind="file">
    <name>task-actuation.cpp</name>
    <path>/home/user/tsid/src/tasks/</path>
    <filename>task-actuation_8cpp</filename>
    <namespace>tsid</namespace>
    <namespace>tsid::tasks</namespace>
  </compound>
  <compound kind="file">
    <name>task-angular-momentum-equality.cpp</name>
    <path>/home/user/tsid/src/tasks/</path>
    <filename>task-angular-momentum-equality_8cpp</filename>
    <namespace>tsid</namespace>
    <namespace>tsid::tasks</namespace>
  </compound>
  <compound kind="file">
    <name>task-base.cpp</name>
    <path>/home/user/tsid/src/tasks/</path>
    <filename>task-base_8cpp</filename>
    <namespace>tsid</namespace>
    <namespace>tsid::tasks</namespace>
  </compound>
  <compound kind="file">
    <name>task-capture-point-inequality.cpp</name>
    <path>/home/user/tsid/src/tasks/</path>
    <filename>task-capture-point-inequality_8cpp</filename>
    <namespace>tsid</namespace>
    <namespace>tsid::tasks</namespace>
  </compound>
  <compound kind="file">
    <name>task-com-equality.cpp</name>
    <path>/home/user/tsid/src/tasks/</path>
    <filename>task-com-equality_8cpp</filename>
    <namespace>tsid</namespace>
    <namespace>tsid::tasks</namespace>
  </compound>
  <compound kind="file">
    <name>task-contact-force-equality.cpp</name>
    <path>/home/user/tsid/src/tasks/</path>
    <filename>task-contact-force-equality_8cpp</filename>
    <namespace>tsid</namespace>
    <namespace>tsid::tasks</namespace>
  </compound>
  <compound kind="file">
    <name>task-contact-force.cpp</name>
    <path>/home/user/tsid/src/tasks/</path>
    <filename>task-contact-force_8cpp</filename>
    <namespace>tsid</namespace>
    <namespace>tsid::tasks</namespace>
  </compound>
  <compound kind="file">
    <name>task-joint-bounds.cpp</name>
    <path>/home/user/tsid/src/tasks/</path>
    <filename>task-joint-bounds_8cpp</filename>
    <namespace>tsid</namespace>
    <namespace>tsid::tasks</namespace>
  </compound>
  <compound kind="file">
    <name>task-joint-posture.cpp</name>
    <path>/home/user/tsid/src/tasks/</path>
    <filename>task-joint-posture_8cpp</filename>
    <namespace>tsid</namespace>
    <namespace>tsid::tasks</namespace>
  </compound>
  <compound kind="file">
    <name>task-joint-posVelAcc-bounds.cpp</name>
    <path>/home/user/tsid/src/tasks/</path>
    <filename>task-joint-posVelAcc-bounds_8cpp</filename>
    <namespace>tsid</namespace>
    <namespace>tsid::tasks</namespace>
  </compound>
  <compound kind="file">
    <name>task-manipulability-equality.cpp</name>
    <path>/home/user/tsid/src/tasks/</path>
    <filename>task-manipulability-equality_8cpp</filename>
    <namespace>tsid</namespace>
    <namespace>tsid::tasks</namespace>
    <member kind="function">
      <type>Eigen::MatrixXd</type>
      <name>spdLog</name>
      <anchorfile>namespacetsid_1_1tasks.html</anchorfile>
      <anchor>aa48ebd3326993a371f8fd1642c947c64</anchor>
      <arglist>(const Eigen::MatrixXd &amp;X, const Eigen::MatrixXd &amp;Y)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::MatrixXd</type>
      <name>spdLog2</name>
      <anchorfile>namespacetsid_1_1tasks.html</anchorfile>
      <anchor>a4b7334b16ab74fc50e70d0365f6a69f8</anchor>
      <arglist>(const Eigen::MatrixXd &amp;X, const Eigen::MatrixXd &amp;Y)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>mandelNotation</name>
      <anchorfile>namespacetsid_1_1tasks.html</anchorfile>
      <anchor>a85ce8c2ea215794382aa98da1ad169ce</anchor>
      <arglist>(const Eigen::MatrixXd &amp;X)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>task-motion.cpp</name>
    <path>/home/user/tsid/src/tasks/</path>
    <filename>task-motion_8cpp</filename>
    <namespace>tsid</namespace>
    <namespace>tsid::tasks</namespace>
    <member kind="typedef">
      <type>math::Vector</type>
      <name>Vector</name>
      <anchorfile>namespacetsid_1_1tasks.html</anchorfile>
      <anchor>ae78641933ca3d3059f7caab7cfe7cd8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>trajectories::TrajectorySample</type>
      <name>TrajectorySample</name>
      <anchorfile>namespacetsid_1_1tasks.html</anchorfile>
      <anchor>ad0faaec488fbc0de0147523ded4e9c3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>task-se3-equality.cpp</name>
    <path>/home/user/tsid/src/tasks/</path>
    <filename>task-se3-equality_8cpp</filename>
    <namespace>tsid</namespace>
    <namespace>tsid::tasks</namespace>
  </compound>
  <compound kind="file">
    <name>trajectory-euclidian.cpp</name>
    <path>/home/user/tsid/src/trajectories/</path>
    <filename>trajectory-euclidian_8cpp</filename>
    <namespace>tsid</namespace>
    <namespace>tsid::trajectories</namespace>
  </compound>
  <compound kind="file">
    <name>trajectory-se3.cpp</name>
    <path>/home/user/tsid/src/trajectories/</path>
    <filename>trajectory-se3_8cpp</filename>
    <namespace>tsid</namespace>
    <namespace>tsid::trajectories</namespace>
  </compound>
  <compound kind="file">
    <name>statistics.cpp</name>
    <path>/home/user/tsid/src/utils/</path>
    <filename>statistics_8cpp</filename>
    <member kind="function">
      <type>Statistics &amp;</type>
      <name>getStatistics</name>
      <anchorfile>statistics_8cpp.html</anchorfile>
      <anchor>a2ec4c67d36ce148cdf1bb48abcf19dc0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>stop-watch.cpp</name>
    <path>/home/user/tsid/src/utils/</path>
    <filename>stop-watch_8cpp</filename>
    <includes id="Stdafx_8hh" name="Stdafx.hh" local="yes" imported="no">tsid/utils/Stdafx.hh</includes>
    <member kind="function">
      <type>Stopwatch &amp;</type>
      <name>getProfiler</name>
      <anchorfile>stop-watch_8cpp.html</anchorfile>
      <anchor>ad945052ee4e72d8edfa6df638f29283c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>tsid</name>
    <filename>namespacetsid.html</filename>
    <namespace>tsid::contacts</namespace>
    <namespace>tsid::math</namespace>
    <namespace>tsid::robots</namespace>
    <namespace>tsid::solvers</namespace>
    <namespace>tsid::tasks</namespace>
    <namespace>tsid::trajectories</namespace>
  </compound>
  <compound kind="namespace">
    <name>tsid::contacts</name>
    <filename>namespacetsid_1_1contacts.html</filename>
  </compound>
  <compound kind="namespace">
    <name>tsid::math</name>
    <filename>namespacetsid_1_1math.html</filename>
    <member kind="function">
      <type>void</type>
      <name>SE3ToXYZQUAT</name>
      <anchorfile>namespacetsid_1_1math.html</anchorfile>
      <anchor>a7632d7415bf148e9d7a3bbd372193297</anchor>
      <arglist>(const pinocchio::SE3 &amp;M, RefVector xyzQuat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SE3ToVector</name>
      <anchorfile>namespacetsid_1_1math.html</anchorfile>
      <anchor>af24527ddde0e25580f82f3a49ab70685</anchor>
      <arglist>(const pinocchio::SE3 &amp;M, RefVector vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vectorToSE3</name>
      <anchorfile>namespacetsid_1_1math.html</anchorfile>
      <anchor>a42cd55fae57d85c780651a9f26d12931</anchor>
      <arglist>(RefVector vec, pinocchio::SE3 &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>errorInSE3</name>
      <anchorfile>namespacetsid_1_1math.html</anchorfile>
      <anchor>ac4b4a961a8a25a6b3421ec5cc707da10</anchor>
      <arglist>(const pinocchio::SE3 &amp;M, const pinocchio::SE3 &amp;Mdes, pinocchio::Motion &amp;error)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solveWithDampingFromSvd</name>
      <anchorfile>namespacetsid_1_1math.html</anchorfile>
      <anchor>a787bdcd3aa327a945b173a4ee0282f8b</anchor>
      <arglist>(Eigen::JacobiSVD&lt; Eigen::MatrixXd &gt; &amp;svd, ConstRefVector b, RefVector sol, double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>svdSolveWithDamping</name>
      <anchorfile>namespacetsid_1_1math.html</anchorfile>
      <anchor>a2baa7c43015c02a31003cf88d3f47854</anchor>
      <arglist>(ConstRefMatrix A, ConstRefVector b, RefVector sol, double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pseudoInverse</name>
      <anchorfile>namespacetsid_1_1math.html</anchorfile>
      <anchor>a4d0cb6b924b5162c0b59aa4a3c466a16</anchor>
      <arglist>(ConstRefMatrix A, RefMatrix Apinv, double tolerance, unsigned int computationOptions)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pseudoInverse</name>
      <anchorfile>namespacetsid_1_1math.html</anchorfile>
      <anchor>afc73d553a5b194584f295411acca7d11</anchor>
      <arglist>(ConstRefMatrix A, Eigen::JacobiSVD&lt; Eigen::MatrixXd &gt; &amp;svdDecomposition, RefMatrix Apinv, double tolerance, unsigned int computationOptions)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pseudoInverse</name>
      <anchorfile>namespacetsid_1_1math.html</anchorfile>
      <anchor>a0f3bce8978d8524882426297017e0db3</anchor>
      <arglist>(ConstRefMatrix A, Eigen::JacobiSVD&lt; Eigen::MatrixXd &gt; &amp;svdDecomposition, RefMatrix Apinv, double tolerance, double *nullSpaceBasisOfA, int &amp;nullSpaceRows, int &amp;nullSpaceCols, unsigned int computationOptions)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dampedPseudoInverse</name>
      <anchorfile>namespacetsid_1_1math.html</anchorfile>
      <anchor>a69c13fa4361dd89904b36a18d02073df</anchor>
      <arglist>(ConstRefMatrix A, Eigen::JacobiSVD&lt; Eigen::MatrixXd &gt; &amp;svdDecomposition, RefMatrix Apinv, double tolerance, double dampingFactor, unsigned int computationOptions, double *nullSpaceBasisOfA, int *nullSpaceRows, int *nullSpaceCols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nullSpaceBasisFromDecomposition</name>
      <anchorfile>namespacetsid_1_1math.html</anchorfile>
      <anchor>a14818fc8b11173a09c81906c5449a3fe</anchor>
      <arglist>(const Eigen::JacobiSVD&lt; Eigen::MatrixXd &gt; &amp;svdDecomposition, double tolerance, double *nullSpaceBasisMatrix, int &amp;rows, int &amp;cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nullSpaceBasisFromDecomposition</name>
      <anchorfile>namespacetsid_1_1math.html</anchorfile>
      <anchor>a55769faf54bf74fa25ead7b47de70aac</anchor>
      <arglist>(const Eigen::JacobiSVD&lt; Eigen::MatrixXd &gt; &amp;svdDecomposition, int rank, double *nullSpaceBasisMatrix, int &amp;rows, int &amp;cols)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>tsid::robots</name>
    <filename>namespacetsid_1_1robots.html</filename>
  </compound>
  <compound kind="namespace">
    <name>tsid::solvers</name>
    <filename>namespacetsid_1_1solvers.html</filename>
    <member kind="function">
      <type>std::string</type>
      <name>HQPDataToString</name>
      <anchorfile>namespacetsid_1_1solvers.html</anchorfile>
      <anchor>a2a6b52481bd53ae409d1e711d397782b</anchor>
      <arglist>(const HQPData &amp;data, bool printMatrices)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>tsid::tasks</name>
    <filename>namespacetsid_1_1tasks.html</filename>
    <member kind="typedef">
      <type>math::Vector</type>
      <name>Vector</name>
      <anchorfile>namespacetsid_1_1tasks.html</anchorfile>
      <anchor>ae78641933ca3d3059f7caab7cfe7cd8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>trajectories::TrajectorySample</type>
      <name>TrajectorySample</name>
      <anchorfile>namespacetsid_1_1tasks.html</anchorfile>
      <anchor>ad0faaec488fbc0de0147523ded4e9c3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Eigen::MatrixXd</type>
      <name>spdLog</name>
      <anchorfile>namespacetsid_1_1tasks.html</anchorfile>
      <anchor>aa48ebd3326993a371f8fd1642c947c64</anchor>
      <arglist>(const Eigen::MatrixXd &amp;X, const Eigen::MatrixXd &amp;Y)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::MatrixXd</type>
      <name>spdLog2</name>
      <anchorfile>namespacetsid_1_1tasks.html</anchorfile>
      <anchor>a4b7334b16ab74fc50e70d0365f6a69f8</anchor>
      <arglist>(const Eigen::MatrixXd &amp;X, const Eigen::MatrixXd &amp;Y)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>mandelNotation</name>
      <anchorfile>namespacetsid_1_1tasks.html</anchorfile>
      <anchor>a85ce8c2ea215794382aa98da1ad169ce</anchor>
      <arglist>(const Eigen::MatrixXd &amp;X)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>tsid::trajectories</name>
    <filename>namespacetsid_1_1trajectories.html</filename>
  </compound>
</tagfile>
